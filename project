import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import numpy as np

transform = transforms.Compose(
    [transforms.ToTensor(),
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)

trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pool1(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pool2(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.pool3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

def calculateAccuracy(model, loader):
    correct = 0
    total = 0
    with torch.no_grad():
      for data in loader:
        images, labels = data
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
    return correct / total

model = ConvNet()  #Baseline results

num_epochs = 50

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):  # loop over the dataset multiple times
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)

    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

### Dropout ####

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.drop1 = nn.Dropout(p=0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.drop2 = nn.Dropout(p=0.2)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool2d(2, 2)
        self.drop3 = nn.Dropout(p=0.2)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.drop4 = nn.Dropout(p=0.2)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pool1(x)
        x = self.drop1(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pool2(x)
        x = self.drop2(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.pool3(x)
        x = self.drop3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.drop4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)


transform = transforms.Compose(
    [transforms.ToTensor(),
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 50

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs): 
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        # zero the parameter gradients
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)
    
print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

###  Weight Decay ####

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pool1(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pool2(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.pool3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)
model = ConvNet() 

num_epochs = 50

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9, weight_decay = 0.001)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)

    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)



print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()


### Data Aug ###

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pool1(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pool2(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.pool3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1))
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)


model = ConvNet() 

num_epochs = 50

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):  # loop over the dataset multiple times
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)

    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)



print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

#################

print("FINAL MODEL")

##############

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = self.dropout1(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = self.dropout2(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = self.dropout3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1))
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  #Weight decay results

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs): 
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            # Calculate test accuracy
            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

######################

print("NORMALIZE BETWEEN -1 and 1")

#####################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = self.dropout1(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = self.dropout2(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = self.dropout3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)


transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()


#######################

print("ADAM")

######################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = self.dropout1(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = self.dropout2(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = self.dropout3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):  
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)


print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

######################

print("ADAMW")

####################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = self.dropout1(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = self.dropout2(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = self.dropout3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)


transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.AdamW(model.parameters(), lr=0.001)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

####################

print("LR STEP DECAY")

######################

import torch.optim.lr_scheduler as lr_scheduler

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = self.dropout1(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = self.dropout2(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = self.dropout3(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                      
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)


model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)
scheduler = lr_scheduler.StepLR(optimizer, step_size=50, gamma=0.1)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs): 
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

################

print("BN and DROPOUT SWITCHED")

#################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.dropout1(x)
        x = self.pool(x)
        x = self.bn2(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.dropout2(x)
        x = self.pool(x)
        x = self.bn4(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.dropout3(x)
        x = self.pool(x)
        x = self.bn6(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.dropout4(x)
        x = self.bn7(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs): 
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)


print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()


###################

print("ONLY DROPOUT")

##################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.dropout2 = nn.Dropout(0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.dropout3 = nn.Dropout(0.4)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.dropout4 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.dropout1(x)
        x = self.pool(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.dropout2(x)
        x = self.pool(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.dropout3(x)
        x = self.pool(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.dropout4(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):  # loop over the dataset multiple times
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)

print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()

################

print("Only Batch norm")

###################

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(64)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn6 = nn.BatchNorm2d(128)
        self.fc1 = nn.Linear(128 * 4 * 4, 128)
        self.bn7 = nn.BatchNorm1d(128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = self.pool(x)
        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        x = self.pool(x)
        x = F.relu(self.conv5(x))
        x = self.bn5(x)
        x = F.relu(self.conv6(x))
        x = self.bn6(x)
        x = self.pool(x)
        x = x.view(-1, 128 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = self.bn7(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.RandomHorizontalFlip(),
     transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),                       
     ])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)

testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

model = ConvNet()  

num_epochs = 300

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

train_loss = list()
test_loss = list()

train_acc = list()
test_acc = list()

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    running_loss_epoch = 0.0
    correct_train = 0
    total_train = 0
    ctr = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss_epoch += (running_loss/2000)
            ctr += 1
            running_loss = 0.0

    train_loss.append(running_loss_epoch / ctr)
    train_acc.append(correct_train / total_train)
    print(correct_train / total_train)
    
    model.eval()
    correct_test = 0
    total_test = 0
    test_running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels_test = data
            outputs_test = model(images)
            loss_test = criterion(outputs_test, labels_test)
            test_running_loss += loss_test.item()

            _, predicted_test = torch.max(outputs_test.data, 1)
            total_test += labels_test.size(0)
            correct_test += (predicted_test == labels_test).sum().item()

    test_loss.append(test_running_loss / len(testloader))
    test_acc.append(correct_test / total_test)
    print(correct_test / total_test)


print('Finished Training')

print(test_acc, test_loss)
print(train_loss, train_acc)

xvec = np.arange(0, len(train_loss), 1)

pyplot.plot(xvec, train_loss, label = "Training")
pyplot.plot(xvec, test_loss, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Loss")

pyplot.show()

xvec = np.arange(0, len(test_acc), 1)

pyplot.plot(xvec, train_acc, label = "Training")
pyplot.plot(xvec, test_acc, label = "Testing")
pyplot.xlabel("Epoch")
pyplot.ylabel("Accuracy")

pyplot.show()
